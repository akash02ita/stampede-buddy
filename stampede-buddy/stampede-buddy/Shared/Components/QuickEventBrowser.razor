@using System;
@using System.Collections;
@inject HttpClient Http
@inject AppState AppState

@if (Events?.Count > 0)
{
    const string POINTER_LEFT = "<";
    const string POINTER_RIGHT = ">";
    <div class="w-100">
        <div class="d-flex gap-2 justify-content-center">

            <div class="left-favourites" style="cursor: pointer;" @onclick="DecrementEvent">
                    @POINTER_LEFT
            </div>

            <div class="justify-content-center w-100">
                <div class="event-card">
                    <img class="favourite-card-img"
                     src="@Events[EventIndex].Image"
                     alt="Snow" style="width:100%; height: 150px; object-fit: fill;">
                    <div class="dim flex">
                        <div class="card-content">
                            <h5>@Events[EventIndex].EventName</h5>
                            <div>@Events[EventIndex].BriefDescription</div>
                            <div><span>Anytime</span> - <span>@Events[EventIndex].Location</span></div>
                            <div class="d-grid gap-2 mt-2">
                                <button class="btn btn-danger" type="button" @onclick="() => {
                                    var destination = Events[EventIndex].Location;
                                    if (destination is not null)
                                    {
                                        AppState.enterNavigation(destination);
                                    }
                                    }" >
                                    Begin
                                    navigation
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="d-flex w-100 justify-content-center my-2 gap-2">
                    @for (int i = 0; i < Events.Count; i++)
                    {
                        @if (i == EventIndex)
                        {
                            <div class="active-dot"></div>
                        }
                        else
                        {
                            <div class="dot"></div>
                        }

                    }
                </div>

            </div>


            <div class="right-favourites" @onclick="IncrementEvent"> @POINTER_RIGHT </div>

        </div>
    </div>
} else
{
    <div>
        <h1>No events found.</h1>
    </div>
}



@code {

    /// <summary>
    /// The list of events to display in this component. 
    /// </summary>
    [Parameter]
    public List<Event>? Events { get; set; }


    /// <summary>
    /// The event from Events which is currently being focused/displayed. 
    /// </summary>
    [Parameter]
    public int EventIndex { get; set; } = 0;

    /// <summary>
    /// Increments the event (moves to the right, wraps around at the end).
    /// </summary>
    private void IncrementEvent()
    {
        if (EventIndex + 1 == Events?.Count)
        {
            EventIndex = 0;
        } else
        {
            EventIndex += 1;
        }

    }

    /// <summary>
    /// Decrements the event (moves to the left, wraps around at the beginning).
    /// </summary>
    private void DecrementEvent()
    {

        if (EventIndex - 1 < 0)
        {
            EventIndex = Events.Count - 1;
        } else
        {
            EventIndex -= 1;
        }
    }



    protected override async Task OnInitializedAsync()
    {
        // get both kinds of events, concat arrays, then shuffle the combined array.
        // need to dynamically render based on type

        if (Events != null)
        {
            // if Events is defined thru a parameter, do not fetch data to fill it with
            return;
        }

        var regularEvents = await Http.GetFromJsonAsync<Event[]>("sample-data/events.json");

        if (regularEvents != null)
        {
            List<Event> allEvents = new List<Event>().Concat(regularEvents).ToList();

            // shuffle the events and assign to member variable
            allEvents = allEvents.OrderBy(a => Guid.NewGuid()).ToList().GetRange(0, 8);

            Events = allEvents;

        }

    }
}



