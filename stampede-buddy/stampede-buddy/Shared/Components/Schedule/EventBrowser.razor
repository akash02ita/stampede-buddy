@inject HttpClient Http
@inject AppState AppState

<div class="events-main-content">

    <div id="events-container" class="container-fluid">

        <BackButton Title="Browse Events"/>



        <div id=" filter-panel" class="mb-2 row">
            <div class="col-3 text-center @FilterTabClassNames[0]" @onclick="() => {SetFilter(EventBrowserFilter.ALL);}">All</div>
            <div class="col-3 text-center @FilterTabClassNames[1]" @onclick="() => {SetFilter(EventBrowserFilter.RIDES);}">Rides</div>
            <div class="col-3 text-center @FilterTabClassNames[2]" @onclick="() => {SetFilter(EventBrowserFilter.FOOD);}">Food</div>
            <div class="col-3 text-center @FilterTabClassNames[3]" @onclick="() => {SetFilter(EventBrowserFilter.EVENTS);}">Events</div>
        </div>

        <div id="events-list" class="d-grid gap-3">


            @if (filteredEvents != null)
            {
                @foreach (var e in filteredEvents)
                {
                    <EventBrowserEventCard Event="@e" />
                }
            } else
            {
                <div class="event-card">
                    <img class="event-card-img"
                     src="https://www.theex.com/wp-content/uploads/2022/05/SuperDogs.png" alt="Snow"
                     style="width:100%; height: 160px;">
                    <div class="dim flex">
                        <div class="card-content">
                            <h2>Superdogs</h2>
                            <div>A dogshow unlike any other!</div>
                            <div>BMO Centre at 1:00pm, 3:00pm, 7:00pm</div>
                            <div class="d-grid gap-2 mt-2">
                                <button class="btn btn-primary  text-white" type="button">Add to Favourites</button>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="event-card">
                    <img class="event-card-img"
                     src="https://www.theex.com/wp-content/uploads/2022/05/SuperDogs.png" alt="Snow"
                     style="width:100%; height: 160px;">
                    <div class="dim flex">
                        <div class="card-content">
                            <h2>Superdogs</h2>
                            <div>A dogshow unlike any other!</div>
                            <div>BMO Centre at 1:00pm, 3:00pm, 7:00pm</div>
                            <div class="d-grid gap-2 mt-2">
                                <button class="btn btn-primary  text-white" type="button">Add to Favourites</button>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="event-card">
                    <img class="event-card-img"
                     src="https://www.theex.com/wp-content/uploads/2022/05/SuperDogs.png" alt="Snow"
                     style="width:100%; height: 160px;">
                    <div class="dim flex">
                        <div class="card-content">
                            <h2>Superdogs</h2>
                            <div>A dogshow unlike any other!</div>
                            <div>BMO Centre at 1:00pm, 3:00pm, 7:00pm</div>
                            <div class="d-grid gap-2 mt-2">
                                <button class="btn btn-primary  text-white" type="button">Add to Favourites</button>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="event-card">
                    <h2>Sample Event</h2>
                    <div>Tagline for the event.</div>
                    <div>Location at 1:00pm</div>
                    <div class="d-grid gap-2 my-2">
                        <button class="btn btn-primary  text-white" type="button">Add to Favourites</button>
                    </div>
                </div>

                <div class="event-card">
                    <h2>Sample Event</h2>
                    <div>Tagline for the event.</div>
                    <div>Location at 1:00pm</div>
                    <div class="d-grid gap-2 my-2">
                        <button class="btn btn-primary  text-white" type="button">Add to Favourites</button>
                    </div>
                </div>

                <div class="event-card">
                    <h2>Sample Event</h2>
                    <div>Tagline for the event.</div>
                    <div>Location at 1:00pm</div>
                    <div class="d-grid gap-2 my-2">
                        <button class="btn btn-primary  text-white" type="button">Add to Favourites</button>
                    </div>
                </div>

            }

        </div>


    </div>

    <div id="event-menu" class="d-flex flex-column justify-content-center align-items-center">

        <label for="search-bar" class="form-label"></label>
        <input type="email" class="" id="search-bar-sm" placeholder="Search here!">

        <div class="mt-3 w-100 btn btn-primary  text-white btn-block btn-lg ">Favorites</div>
        <Continue ClassName="mt-3 w-100 btn btn-primary  text-white btn-block btn-lg" />
    </div>

</div>


@code {

    // should be passed callbacks for adding to schedule & favorites respectively

    private List<BaseEvent>? allAvailableEvents;
    private List<BaseEvent>? filteredEvents;

    public EventBrowserFilter Filter { get; set; } = EventBrowserFilter.ALL;

    public enum EventBrowserFilter
    {
        ALL,
        RIDES,
        FOOD,
        EVENTS
    }

    private const string ACTIVE_FILTER_CLASS_NAME = "bg-primary text-white";
    private const string INACTIVE_FILTER_CLASS_NAME = "bg-secondary text-white";

    public string[] FilterTabClassNames = new string[] { ACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME};

    protected override async Task OnInitializedAsync()
    {
        // get both kinds of events, concat arrays, then shuffle the combined array. 
        // need to dynamically render based on type

        var regularEvents = await Http.GetFromJsonAsync<Event[]>("sample-data/events.json");
        var scheduledEvents = await Http.GetFromJsonAsync<ScheduledEvent[]>("sample-data/scheduled-events.json");

        if (regularEvents != null && scheduledEvents != null)
        {
            List<BaseEvent> allEvents = new List<BaseEvent>().Concat(regularEvents).Concat(scheduledEvents).ToList();

            // shuffle the events and assign to member variable
            allAvailableEvents = allEvents.OrderBy(a => Guid.NewGuid()).ToList();

            refreshFilter(EventBrowserFilter.ALL);

        }

    }

    public void SetFilter(EventBrowserFilter newFilter)
    {
        Filter = newFilter;

        refreshFilter(newFilter);

        StateHasChanged();

    }

    public void refreshFilter(EventBrowserFilter newFilter)
    {
        if (newFilter == EventBrowserFilter.ALL)
        {
            filteredEvents = allAvailableEvents;
            FilterTabClassNames = new string[] { ACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME };

            return;
        }
        else if (newFilter == EventBrowserFilter.FOOD)
        {
            filteredEvents = allAvailableEvents?.Where(x => x.Type == "food").ToList();
            FilterTabClassNames = new string[] { INACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME, ACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME };

        }
        else if (newFilter == EventBrowserFilter.RIDES)
        {
            filteredEvents = allAvailableEvents?.Where(x => x.Type == "rides").ToList();
            FilterTabClassNames = new string[] { INACTIVE_FILTER_CLASS_NAME, ACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME };
        }
        else if (newFilter == EventBrowserFilter.EVENTS)
        {
            filteredEvents = allAvailableEvents?.Where(x => x.Type == "event").ToList();
            FilterTabClassNames = new string[] { INACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME, INACTIVE_FILTER_CLASS_NAME, ACTIVE_FILTER_CLASS_NAME };
        }
    }

    }

